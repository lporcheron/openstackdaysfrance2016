# Agent configuration files are written in yaml.
#
# Configuration could be overridden by files under
# /etc/bleemeo/agent.conf.d/*.conf
# We suggest to create a file under that folder and leave this
# file unchanged.
#
# Files from the agent.conf.d folder are read in dictonary order (e.g.
# 00-defaults.conf is read before 99-custom.conf)

# You can configure tags for your agent
#tags:
#    - web-server
#    - application-1
#    - ...


logging:
    # level could be ERROR, WARNING, INFO, DEBUG
    level: INFO
    # output could be console or syslog
    output: console

# Bleemeo agent has a simple webserver by default. It listen on localhost:8015
# You can disable it with the following:
# web:
#    enabled: False

# You can define a threshold on ANY metric. You only need to know it's name and
# add an entry like this one:
#   metric_name:
#       low_critical: 1.0
#       low_warning: 2.0
#       high_warning: 3
#       high_critical: 4.2
# You can omit any of the above 4 threshold (or explicitly set it to null).
#
thresholds:
    cpu_used:
        # When cpu_used grow above 90% it is critical. 80 % is warning.
        high_warning: 80
        high_critical: 90
    disk_used_perc:
        high_warning: 80
        high_critical: 90
    net_err_in:
        high_critical: 0
    net_err_out:
        high_critical: 0
    mem_used_perc:
        high_warning: 80
        high_critical: 90
    io_utilisation:
        high_warning: 80
        high_critical: 90

# Ignore all network interface starting with one of those prefix
network_interface_blacklist:
    - docker
    - lo
    - veth
    - virbr
    - vnet

# Disk to monitor IO statistics
disk_monitor:
    - ^(hd|sd|vd|xvd)[a-z]$
    - ^mmcblk[0-9]$
    - ^nvme[0-9]n[0-9]$
    - ^fio[a-z]$
    - ^drbd[0-9]$
    - ^rbd[0-9]$
    - ^rssd[a-z]$
    - ^skd[0-9]$
    - ^rsxx[0-9]$'

# Additional metric could be retrived over HTTP(s) by the agent.
#
# It expect response to be only one number in a text/plain response.
#
# Example of metrics:
# metric:
#   pull:
#       the_name_of_your_metric:
#           url: http://localhost:8080/myapp/metric/users_count
#           item: myapp  # item to add to the metric. Default to none
#           ssl_check: true  # should SSL certificate be checked? Default to yes
#           interval: 10  # retrive the metric every N seconds, default to 10


# Some discovered service may need additional information to gather metrics,
# for example MySQL need a username and password.
# Other use case could be a service listening on different port or addresse
# than the default one.
#
# You could provide this information though "service" configuration:
#
# service:
#     - id: mysql
#       #instance: container-name  # If your MySQL is running in a container,
#                                  # specify instance and the container name
#       #address: 127.0.0.1        # Override the address discovered
#       #port: 3306                # Override the port discovered
#       username: root
#       password: root
#     - id: rabbitmq
#       username: guest
#       password: guest
#       mgmt_port: 15672          # Port of RabbitMQ management interface

# Additional check (TCP or HTTP) and Nagios-check could be defined to
# monitor custom process.
#
# Example of check:
# service:
#     - id: the_name_of_your_service
#       port: 8080              # TCP port of your service
#       address: 127.0.0.1      # Optional, default to 127.0.0.1
#       check_type: http        # Optional, default to "tcp". Could be either
#                               # "http" or "tcp"
#     - id: other_name_of_service
#       check_type: nagios
#       check_command: /path/to/check_service --with-argument-if-applicable
#       # Optionally you can specify an address and TCP port. Bleemeo agent
#       # will connect to this port, if connection is closed, agent will
#       # immediately call your check command instead of waiting up to
#       # one minute.
#       address: 127.0.0.1
#       port: 1234

bleemeo: 
    enabled: False

influxdb:
    enabled: True
    #host: localhost
    #port: 8086
    db_name: metrics

telegraf:    
     docker_name: telegraf
